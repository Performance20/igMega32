
igMega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000001a6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  00800116  00800116  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a51  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2e  00000000  00000000  00001e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d2c  00000000  00000000  0000287f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  000035ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000bc9b  00000000  00000000  0000396c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012d0  00000000  00000000  0000f607  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000108d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000037bf  00000000  00000000  000109f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	91 c0       	rjmp	.+290    	; 0x16c <__vector_18>
  4a:	00 00       	nop
  4c:	71 c0       	rjmp	.+226    	; 0x130 <__vector_19>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 35       	cpi	r26, 0x5A	; 90
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	02 d0       	rcall	.+4      	; 0xa0 <main>
  9c:	82 c0       	rjmp	.+260    	; 0x1a2 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <main>:
{
	//char buffer[BUFF_SIZE];
	
	//init_device();
	//ioport_configure_pin(LED0, IOPORT_DIR_OUTPUT |  IOPORT_INIT_HIGH);
	OUTPUT_SET(LED_BUILTIN);  //LED PB5 as output
  a0:	25 9a       	sbi	0x04, 5	; 4
	//	PORTD = (1<<PORTD7)|(1<<PORTD6)|(1<<PORTD5)|(1<<PORTD4)|(1<<PORTD3)|(1<<PORTD2)|(1<<PORTD1)|(1<<PORTD0);
		//PORTD = 0x00; // (1<<PORTD7)|(1<<PORTD6)|(1<<PORTD5)|(1<<PORTD4)|(1<<PORTD3)|(1<<PORTD2)|(1<<PORTD1)|(1<<PORTD0);
	//	DDRD = (1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)|(1<<DDD3)|(1<<DDD2)|(1<<DDD1)|(1<<DDD0);
   // PORTB = (1<<PORTB5);
    //PORTB = 0x00; //(1<<PORTB7)|(1<<PORTB6)|(1<<PORTB5)|(1<<PORTB4)|(1<<PORTB3)|(1<<PORTB2)|(1<<PORTB1)|(1<<PORTB0);
    DDRB = (1<<DDB5);
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	84 b9       	out	0x04, r24	; 4
    
	/* Replace with your application code */
	bool a = false;
  a6:	c0 e0       	ldi	r28, 0x00	; 0
		if (uart_AvailableBytes())
		{
			//uart_gets(buffer, BUFF_SIZE); // read 24 bytes or one line from usart buffer 
			//uart_putstr(buffer);
			if (a)	{ HIGH_SET(LED_BUILTIN); /*PORTB = (1<<PORTB5);*/ a = 0; }
			else	{ LOW_SET(LED_BUILTIN); /*PORTB &= ~(1<<PORTB5);*/ a = 1; }	
  a8:	11 e0       	ldi	r17, 0x01	; 1
		
		if (uart_AvailableBytes())
		{
			//uart_gets(buffer, BUFF_SIZE); // read 24 bytes or one line from usart buffer 
			//uart_putstr(buffer);
			if (a)	{ HIGH_SET(LED_BUILTIN); /*PORTB = (1<<PORTB5);*/ a = 0; }
  aa:	d0 e0       	ldi	r29, 0x00	; 0
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
  ac:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx0_Head>
  b0:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <rx0_Tail>
	bool a = false;
    while (1) 
    {
		
		
		if (uart_AvailableBytes())
  b4:	89 1b       	sub	r24, r25
  b6:	8f 71       	andi	r24, 0x1F	; 31
  b8:	c9 f3       	breq	.-14     	; 0xac <main+0xc>
		{
			//uart_gets(buffer, BUFF_SIZE); // read 24 bytes or one line from usart buffer 
			//uart_putstr(buffer);
			if (a)	{ HIGH_SET(LED_BUILTIN); /*PORTB = (1<<PORTB5);*/ a = 0; }
  ba:	cc 23       	and	r28, r28
  bc:	19 f0       	breq	.+6      	; 0xc4 <main+0x24>
  be:	2d 9a       	sbi	0x05, 5	; 5
  c0:	cd 2f       	mov	r28, r29
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x28>
			else	{ LOW_SET(LED_BUILTIN); /*PORTB &= ~(1<<PORTB5);*/ a = 1; }	
  c4:	2d 98       	cbi	0x05, 5	; 5
  c6:	c1 2f       	mov	r28, r17
			//TOGGLE_SET(LED_BUILTIN);
			uart_puts("hello from usart 0\r\n"); // write const string to usart buffer // C++ restriction, in C its the same as uart_putstr()
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	22 d0       	rcall	.+68     	; 0x112 <uart0_putstr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	87 ea       	ldi	r24, 0xA7	; 167
  d2:	91 e6       	ldi	r25, 0x61	; 97
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x34>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x3e>
  de:	00 00       	nop
  e0:	e5 cf       	rjmp	.-54     	; 0xac <main+0xc>

000000e2 <uart0_putc>:
//Return    : Next byte in buffer.
//******************************************************************
	uint8_t uart0_peek(void)
	{
		return rx0_buffer[(rx0_Tail+1) & RX0_BUFFER_MASK];
	}
  e2:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <tx0_Head>
  e6:	9f 5f       	subi	r25, 0xFF	; 255
  e8:	9f 71       	andi	r25, 0x1F	; 31
  ea:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <tx0_Tail>
  ee:	92 17       	cp	r25, r18
  f0:	e1 f3       	breq	.-8      	; 0xea <uart0_putc+0x8>
  f2:	e9 2f       	mov	r30, r25
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	e6 5c       	subi	r30, 0xC6	; 198
  f8:	fe 4f       	sbci	r31, 0xFE	; 254
  fa:	80 83       	st	Z, r24
  fc:	2f b7       	in	r18, 0x3f	; 63
  fe:	f8 94       	cli
 100:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <tx0_Head>
 104:	e1 ec       	ldi	r30, 0xC1	; 193
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	80 83       	st	Z, r24
 10e:	2f bf       	out	0x3f, r18	; 63
 110:	08 95       	ret

00000112 <uart0_putstr>:
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	21 f0       	breq	.+8      	; 0x12a <uart0_putstr+0x18>
 122:	df df       	rcall	.-66     	; 0xe2 <uart0_putc>
 124:	89 91       	ld	r24, Y+
 126:	81 11       	cpse	r24, r1
 128:	fc cf       	rjmp	.-8      	; 0x122 <uart0_putstr+0x10>
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <__vector_19>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
 130:	0f 93       	push	r16
 132:	0f b7       	in	r16, 0x3f	; 63
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
 138:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <tx0_Tail>
 13c:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <tx0_Head>
 140:	e3 95       	inc	r30
 142:	ef 71       	andi	r30, 0x1F	; 31
 144:	ef 13       	cpse	r30, r31
 146:	05 c0       	rjmp	.+10     	; 0x152 <USART0_TX_CONTINUE>
 148:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 14c:	ff 7d       	andi	r31, 0xDF	; 223
 14e:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

00000152 <USART0_TX_CONTINUE>:
 152:	e0 93 36 01 	sts	0x0136, r30	; 0x800136 <tx0_Tail>
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e6 5c       	subi	r30, 0xC6	; 198
 15a:	fe 4f       	sbci	r31, 0xFE	; 254
 15c:	e0 81       	ld	r30, Z
 15e:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

00000162 <USART0_TX_EXIT>:
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	0f bf       	out	0x3f, r16	; 63
 168:	0f 91       	pop	r16
 16a:	18 95       	reti

0000016c <__vector_18>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
 16c:	0f 93       	push	r16
 16e:	0f b7       	in	r16, 0x3f	; 63
 170:	9f 93       	push	r25
 172:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
 17a:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <rx0_Head>
 17e:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <rx0_Tail>
 182:	e3 95       	inc	r30
 184:	ef 71       	andi	r30, 0x1F	; 31
 186:	fe 17       	cp	r31, r30
 188:	31 f0       	breq	.+12     	; 0x196 <USART0_RX_EXIT>
 18a:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <rx0_Head>
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ea 5e       	subi	r30, 0xEA	; 234
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	90 83       	st	Z, r25

00000196 <USART0_RX_EXIT>:
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	9f 91       	pop	r25
 19c:	0f bf       	out	0x3f, r16	; 63
 19e:	0f 91       	pop	r16
 1a0:	18 95       	reti

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
